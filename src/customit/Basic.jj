/** * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+*/options{  static = false;}PARSER_BEGIN(Basic)package customit;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.nio.charset.StandardCharsets;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Basic{  public static void main(String args []) throws ParseException  {        try    {                                        InputStream stream = new ByteArrayInputStream(args[0].getBytes(StandardCharsets.UTF_8));            Basic parser = new Basic(stream);           parser.toggle();                             //System.out.println(sum);       }       catch (ParseException ex)       {         ex.printStackTrace();       }       catch (TokenMgrError ex)       {         ex.printStackTrace();       }       catch (Exception ex)    {       ex.printStackTrace();    }  }}PARSER_END(Basic)SKIP :{  " "| "\r"| "\t"| "\n"| "\r\n"| "to"| "from"| "should"| "please"| "and"| "the"| "switch"| "someone"| "is"| "ring"}TOKEN : /* OPERATORS */{  < PLUS : "plus" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| <QUOTED_STRING: "\"" (~["\""])+ "\"" >}TOKEN : /*Contact*/{  < ME : "me" | "my phone">| < MY_EMAIL : "me email">}TOKEN : /* ON/OFF */{  < STATE : "on" | "off" >}TOKEN : /*Sensor*/{  < SENSOR : "proximity" | "led">| < ALARM : "alarm">}TOKEN : /*AT TIME*/{  < WHEN : "when">| < THEN : "then">| < AT : "at">| < IN : "in">| < TIME : (< DIGIT >)+ >| < WHERE : "closer" | "far">}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < EOL : "." >}String Start() throws NumberFormatException :{       Token t ;       int i ;       int value ;}       {       t = < CONSTANT >       { i = Integer.parseInt( t.image ) ; }       { value = i ; }       (       <PLUS>       t = < CONSTANT >       { i = Integer.parseInt( t.image ) ; }       { value += i ; }       )*              <EOL>       { return Integer.toString(i) ; }}void toggle () :{}{  (sensor ()) | (proximity()) |< EOL >}void sensor() :{  Token t;  String sensor;  String state;  String sensorPin = "/sys/class/gpio/gpio23";  }{    t = <SENSOR>  {    sensor = t.image;    if (sensor.equals("led"))       sensorPin = "/sys/class/gpio/gpio45";  }  t = < STATE > {   try   {        		BufferedWriter bw = new BufferedWriter ( new FileWriter (sensorPin+"/direction"));		bw.write("out");		bw.close();		bw = new BufferedWriter ( new FileWriter (sensorPin+"/value"));       	    state = t.image;	    if (state.equals("on"))	       bw.write("1");	    if (state.equals("off"))	       bw.write("0");	    bw.close();  }  catch (IOException ex)  {    ex.printStackTrace();  }    System.out.println("light is: Modified");               }  (    toggle()  )*       }void proximity():{  Token t, t_next;  String sensor, var_where;  String state;  String sensorPin = "/sys/class/gpio/gpio66";  int flag = 1;  String message_text;  int value = 0;}{  t = < WHEN >  {  }  t = < WHERE >  {    var_where = t.image;       if (var_where.equals("closer"))       {                flag = 1;       }       else       {              flag = 0;       }   }  t = < SENSOR >  {        sensor = t.image;       if (sensor.equals("led"))       sensorPin = "/sys/class/gpio/gpio45";    if (sensor.equals ("proximity"))       sensorPin = "/sys/class/gpio/gpio66";         }  t = < THEN >  {      }  (    sensor()  )*    t = < ALARM >  {         }     (       sensor()  )*  toggle()}