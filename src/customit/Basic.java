/* Generated By:JavaCC: Do not edit this line. Basic.java */
package customit;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Basic implements BasicConstants {
  public static void main(String args []) throws ParseException
  {

    try
    {

       InputStream stream = new ByteArrayInputStream(args[0].getBytes(StandardCharsets.UTF_8));
           Basic parser = new Basic(stream);
           parser.toggle();


           //System.out.println(sum);       }
       catch (ParseException ex)
       {
         ex.printStackTrace();
       }
       catch (TokenMgrError ex)
       {
         ex.printStackTrace();
       }
       catch (Exception ex)
    {
       ex.printStackTrace();
    }
  }

  final public String Start() throws ParseException, NumberFormatException {
       Token t ;
       int i ;
       int value ;
    t = jj_consume_token(CONSTANT);
         i = Integer.parseInt( t.image ) ;
         value = i ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(PLUS);
      t = jj_consume_token(CONSTANT);
         i = Integer.parseInt( t.image ) ;
         value += i ;
    }
    jj_consume_token(EOL);
         {if (true) return Integer.toString(i) ;}
    throw new Error("Missing return statement in function");
  }

  final public void toggle() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SENSOR:
      sensor();
      break;
    case WHEN:
      proximity();
      break;
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sensor() throws ParseException {
  Token t;
  String sensor;
  String state;
  String sensorPin = "/sys/class/gpio/gpio23";
    t = jj_consume_token(SENSOR);
    sensor = t.image;

    if (sensor.equals("led"))
       sensorPin = "/sys/class/gpio/gpio45";
    t = jj_consume_token(STATE);
   try
   {


                BufferedWriter bw = new BufferedWriter ( new FileWriter (sensorPin+"/direction"));
                bw.write("out");
                bw.close();
                bw = new BufferedWriter ( new FileWriter (sensorPin+"/value"));

            state = t.image;
            if (state.equals("on"))
               bw.write("1");
            if (state.equals("off"))
               bw.write("0");
            bw.close();
  }
  catch (IOException ex)
  {
    ex.printStackTrace();
  }
    System.out.println("light is: Modified");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SENSOR:
      case WHEN:
      case EOL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      toggle();
    }
  }

  final public void proximity() throws ParseException {
  Token t, t_next;
  String sensor, var_where;
  String state;
  String sensorPin = "/sys/class/gpio/gpio66";
  int flag = 1;
  String message_text;
  int value = 0;
    t = jj_consume_token(WHEN);

    t = jj_consume_token(WHERE);
    var_where = t.image;
       if (var_where.equals("closer"))
       {
              flag = 1;
       }
       else
       {
              flag = 0;
       }
    t = jj_consume_token(SENSOR);
    sensor = t.image;
       if (sensor.equals("led"))
       sensorPin = "/sys/class/gpio/gpio45";
    if (sensor.equals ("proximity"))
       sensorPin = "/sys/class/gpio/gpio66";
    t = jj_consume_token(THEN);

    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SENSOR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      sensor();
    }
    t = jj_consume_token(ALARM);

    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SENSOR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      sensor();
    }
    toggle();
  }

  /** Generated Token Manager. */
  public BasicTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x5000000,0x5000000,0x1000000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4,0x4,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Basic(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Basic(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BasicTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Basic(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BasicTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Basic(BasicTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
